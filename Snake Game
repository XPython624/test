#include<stdio.h>
#include<graphics.h>
#include<conio.h>
#include<stdlib.h>
#include<MMsystem.h>
#pragma comment(lib,"winmm.lib")
#define SNAKE_NUM 500 //蛇的最大节数
//蛇的方向
enum DIR {
	UP,
	DOWN,
	LEFT,
	RIGHT,
};
//蛇的结构
struct Snake {
	int size;//蛇的节数
	int dir;//蛇的方向
	int speed;//蛇的移动速度
	POINT coor[SNAKE_NUM];//坐标

}snake;
//实物结构
struct Food {
	int x;
	int y;
	int r;     //食物大小
	bool flag; //食物是否被吃
	DWORD color;//食物颜色

}food;
// 初始化食物
void FoodInit(){
	food.x = rand() % 640;
	food.y = rand() % 480;
	food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
	food.r = rand() % 10 + 5;
	food.flag = true;
}
//数据的初始化
void GameInit() {
	//播放背景音乐
	mciSendString(_T("play bg.mp3 repeat"), 0, 0, 0);
	// init 初始化 graph图形窗口
	initgraph(640, 480);

	srand(GetTickCount());
	//初始化蛇，一开始有三节
	snake.size = 4;
	snake.speed = 10;
	snake.dir = RIGHT;
	for (int i = 0; i <snake.size; i++) {
		snake.coor[i].x = 40-10*i;
		snake.coor[i].y = 10;
	}
	//设置随机数种子 ，stdlib.h
	//初始化食物
	FoodInit();


}
//设置背景颜色 
void GameDraw() {

	//双缓冲绘图,防止闪屏
	BeginBatchDraw();
	//设置背景颜色
	setbkcolor(RGB(28, 115, 119));
	cleardevice();

	//绘制蛇
	setfillcolor(GREEN);
	for (int i = 0; i < snake.size; i++) {
		solidcircle(snake.coor[i].x, snake.coor[i].y, 5);
	}
	//绘制食物
	if (food.flag) {
		solidcircle(food.x, food.y, food.r);
	}
	EndBatchDraw();
}
	
//移动蛇
void snakeMove() {
	switch (snake.dir) {
	case UP:
		snake.coor[0].y-=snake.speed;
		if (snake.coor[0].y + 10 <= 0) {
			snake.coor[0].y = 480;
		}
		break;
	case DOWN:
		snake.coor[0].y+=snake.speed;
		if (snake.coor[0].y - 10 >= 480) {
			snake.coor[0].y = 0;
		}
		break;
	case LEFT:
		snake.coor[0].x-=snake.speed;
		if (snake.coor[0].x + 10 <= 0) {
			snake.coor[0].x = 640;
		}
		break;
	case RIGHT:
		snake.coor[0].x+=snake.speed;
		if (snake.coor[0].x - 10 >= 640) {
			snake.coor[0].x = 0;
		}
		break;
	}
	//让身体跟着头
	for (int i = snake.size - 1; i > 0; i--) {
		snake.coor[i] = snake.coor[i - 1];
	}
}
// 通过按键改变蛇的移动方向
void keycontrol() {
	//检测是否有按键，如果有按键返回真，否则返回假
	if (_kbhit()){

		// 72 80 75 77 上下左右
		switch (_getch()) {
		case 'w':
		case 'W':
		case 72:
			if (snake.dir != DOWN) {
				snake.dir = UP;
			};
			break;
		case 's':
		case 'S':
		case 80:
			if (snake.dir != UP) {
				snake.dir = DOWN;
			};
			break;
		case 'a':
		case 'A':
		case 75:
			if (snake.dir != RIGHT) {
				snake.dir = LEFT;
			};
			break;
		case 'd':
		case 'D':
		case 77:
			if (snake.dir != LEFT) {
				snake.dir = RIGHT;
			};
			break;
		case ' ':
			while (1) {
				if (_getch() == ' ')
					return;
			}
			break;
		}
	}
}
void EatFood() {
	if (food.flag&&snake.coor[0].x >= food.x-food.r && snake.coor[0].x<= food.x+food.r
		&& snake.coor[0].y >= food.y - food.r && snake.coor[0].y <= food.y + food.r) {
		food.flag = false;
		snake.size++;
	}
	if (!food.flag) {
		FoodInit();
	}
}
int main() {

	GameInit();
	while (1) {	
		GameDraw();
		snakeMove();
		keycontrol();
		EatFood();
		Sleep(100);
	}
	return 0;
}
